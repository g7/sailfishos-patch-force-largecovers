Index: /usr/share/lipstick-jolla-home-qt5/layers/HomeLayer.qml
===================================================================
--- .orig/usr/share/lipstick-jolla-home-qt5/layers/HomeLayer.qml
+++ /usr/share/lipstick-jolla-home-qt5/layers/HomeLayer.qml
@@ -19,6 +19,8 @@
     property alias statusBar: statusBar
     property alias partnerspaces: partnerspaces
     property alias dimmer: wallpaperDimmer
+    property alias switcherSettings: switcherSettings
+    property alias stickyStatusBar: statusContainer.sticky
 
     readonly property Item window: currentItem.window
     readonly property bool active: currentItem.active
@@ -42,6 +44,15 @@
     readonly property real _minimizeThreshold: width * (1.0 - _minimizedScale) / 2
     readonly property bool _transposed: Lipstick.compositor.topmostWindowAngle % 180 != 0
 
+    ConfigurationGroup {
+        id: switcherSettings
+
+        path: "/desktop/lipstick-jolla-home-qt5/homescreenSwitcher"
+
+        property string coverSize: "large"
+        property bool alwaysStickStatusBar: false
+    }
+
     function partnerLayerForWindow(window) {
         for (var layer = switcherLayer.rightItem; layer != eventsLayer; layer = layer.rightItem) {
             if (JollaSystemInfo.isWindowForLauncherItem(window, layer.launcherItem)) {
@@ -155,6 +166,8 @@
 
         anchors.centerIn: parent
 
+        property bool sticky: (switcherSettings.alwaysStickStatusBar && currentItem == events) || currentItem == switcher
+
         rotation: Lipstick.compositor.topmostWindowAngle
         Behavior on rotation {
             SequentialAnimation {
@@ -170,17 +183,18 @@
         height: rotation % 180 == 0
                     ? Lipstick.compositor.height
                     : Lipstick.compositor.width
-        z: active ? 0 : -1000
+        z: active ? 0 : sticky ? 100 : -1000 /* Forgive me */
 
         StatusBar {
             id: statusBar
 
             property real opacityFromY: Math.max(0, (height + y*1.5)/height)
 
+            increaseGradient: statusContainer.sticky
             backgroundVisible: true
             y: -currentItem.statusOffset * (1.0-homescreen.progress) - (alternateItem ? alternateItem.statusOffset * homescreen.progress : 0)
             updatesEnabled: Lipstick.compositor.homeActive || (Lipstick.compositor.peekingLayer.exposed && !Lipstick.compositor.peekingLayer.opaque)
-            opacity: Math.min(1.0, opacityFromY, currentItem.statusOpacity)
+            opacity: statusContainer.sticky ? 1.0 : Math.min(1.0, opacityFromY, currentItem.statusOpacity)
         }
     }
 
Index: /usr/share/lipstick-jolla-home-qt5/layers/SwitcherLayer.qml
===================================================================
--- .orig/usr/share/lipstick-jolla-home-qt5/layers/SwitcherLayer.qml
+++ /usr/share/lipstick-jolla-home-qt5/layers/SwitcherLayer.qml
@@ -22,7 +22,7 @@
     property real contentY
     property bool menuOpen
 
-    statusOffset: Math.min(contentY, statusBar.height + Theme.paddingMedium)
+    statusOffset: (Lipstick.compositor.homeLayer.stickyStatusBar && !housekeeping) ? 0 : Math.min(contentY, statusBar.height + Theme.paddingMedium)
     statusOpacity: menuOpen ? Theme.opacityLow : 1
 
     Behavior on statusOpacity {
Index: /usr/share/lipstick-jolla-home-qt5/switcher/Switcher.qml
===================================================================
--- .orig/usr/share/lipstick-jolla-home-qt5/switcher/Switcher.qml
+++ /usr/share/lipstick-jolla-home-qt5/switcher/Switcher.qml
@@ -29,6 +29,8 @@
     property bool housekeeping: false
     property bool menuOpen: housekeepingMenu.active
 
+    property string forcedCoverSize: Lipstick.compositor ? Lipstick.compositor.homeLayer.switcherSettings.coverSize : "dynamic"
+
     property alias model: switcherModel
 
     property int secondLastAppIndex
@@ -37,11 +39,6 @@
     onSwitcherVisibleChanged: {
         if (!switcherVisible) {
             housekeeping = false
-            // The view is completely hidden. The delay is a grace period, so
-            // that if you quickly exit and reenter the view has not moved.
-            resetPosition(300)
-        } else {
-            cancelResetPosition()
         }
         if (columnUpdateTimer.running) {
             columnUpdateTimer.stop()
@@ -364,6 +361,9 @@
         visible: Lipstick.compositor.switcherLayer.scale === 1.0 && switcherRoot.contentHeight > switcherRoot.height
     }
 
+    /* Update columns on switcherSettings's coverSizeChanged() signal */
+    Component.onCompleted: Lipstick.compositor.homeLayer.switcherSettings.onCoverSizeChanged.connect(switcherGrid.updateColumns)
+
     MouseArea {
         id: switcherWrapper
 
@@ -397,7 +397,6 @@
             columns: largeColumns
             statusBarHeight: switcherRoot.statusBarHeight

-            readonly property bool allowSmallCovers: !largeScreen
             readonly property int largeItemCount: largeColumns * largeRows

             property QtObject ngfEffect
@@ -421,7 +420,8 @@
 
             function doUpdateColumns() {
                 var cols = switcherGrid.largeColumns
-                if (switcherGrid.allowSmallCovers && switcherModel.itemCount > switcherGrid.largeItemCount)
+                if ((switcherRoot.forcedCoverSize == "dynamic" && switcherModel.itemCount > switcherGrid.largeItemCount)
+                    || switcherRoot.forcedCoverSize == "small")
                     cols = switcherGrid.smallColumns
                 if (cols !== switcherGrid.columns) {
                     scrollAnimation.stop()
@@ -446,7 +446,8 @@
                 ScriptAction {
                     script: {
                         var cols = switcherGrid.largeColumns
-                        if (switcherGrid.allowSmallCovers && switcherModel.itemCount > switcherGrid.largeItemCount)
+                        if ((switcherRoot.forcedCoverSize == "dynamic" && switcherModel.itemCount > switcherGrid.largeItemCount)
+                            || switcherRoot.forcedCoverSize == "small")
                             cols = switcherGrid.smallColumns
                         switcherGrid.columns = cols
                         switcherGrid.coverSize = switcherGrid.columns == switcherGrid.largeColumns ? Theme.coverSizeLarge : Theme.coverSizeSmall
Index: /usr/share/lipstick-jolla-home-qt5/statusarea/StatusBar.qml
===================================================================
--- .orig/usr/share/lipstick-jolla-home-qt5/statusarea/StatusBar.qml
+++ /usr/share/lipstick-jolla-home-qt5/statusarea/StatusBar.qml
@@ -10,6 +10,8 @@
 
     property real baseY: Theme.paddingMedium + Theme.paddingSmall
 
+    property bool increaseGradient: false
+
     property alias updatesEnabled: statusArea.updatesEnabled
     property alias recentlyOnDisplay: statusArea.recentlyOnDisplay
     property alias lockscreenMode: statusArea.lockscreenMode
@@ -27,6 +29,7 @@
             fill: parent
             bottomMargin: -2 * Theme.paddingLarge
         }
+        startColor: Theme.rgba(Theme.overlayBackgroundColor, increaseGradient ? 0.6 : 0.2)
         opacity: 1.0 - Math.abs(statusBar.y/Theme.paddingMedium)
     }
 
Index: /usr/share/lipstick-jolla-home-qt5/layers/EventsLayer.qml
===================================================================
--- .orig/usr/share/lipstick-jolla-home-qt5/layers/EventsLayer.qml
+++ /usr/share/lipstick-jolla-home-qt5/layers/EventsLayer.qml
@@ -38,7 +38,7 @@
     onHousekeepingChanged: if (housekeeping) Lipstick.compositor.topMenuLayer.housekeeping = false
     onTopMenuHousekeepingChanged: if (topMenuHousekeeping) housekeeping = false
 
-    statusOffset: Math.min(contentY, statusBar.height + Theme.paddingMedium)
+    statusOffset: Lipstick.compositor.homeLayer.stickyStatusBar ? 0 : Math.min(contentY, statusBar.height + Theme.paddingMedium)
     statusOpacity: menuOpen ? Theme.opacityLow : 1
 
     onHousekeepingAllowedChanged: {
